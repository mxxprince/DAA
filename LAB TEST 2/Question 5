import numpy as np

def strassen_multiply(A, B):
    n = A.shape[0]
    if n == 1:
        return A * B
    else:
        k = n // 2

        A11 = A[:k, :k]
        A12 = A[:k, k:]
        A21 = A[k:, :k]
        A22 = A[k:, k:]

        B11 = B[:k, :k]
        B12 = B[:k, k:]
        B21 = B[k:, :k]
        B22 = B[k:, k:]

        M1 = strassen_multiply(A11 + A22, B11 + B22)
        M2 = strassen_multiply(A21 + A22, B11)
        M3 = strassen_multiply(A11, B12 - B22)
        M4 = strassen_multiply(A22, B21 - B11)
        M5 = strassen_multiply(A11 + A12, B22)
        M6 = strassen_multiply(A21 - A11, B11 + B12)
        M7 = strassen_multiply(A12 - A22, B21 + B22)

        C11 = M1 + M4 - M5 + M7
        C12 = M3 + M5
        C21 = M2 + M4
        C22 = M1 - M2 + M3 + M6

        C = np.vstack((np.hstack((C11, C12)), np.hstack((C21, C22))))
        return C

A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])
result = strassen_multiply(A, B)
print("Product of matrices:\n", result)
