def compute_lps(needle):
    m = len(needle)
    lps = [0] * m
    length = 0
    i = 1
    
    while i < m:
        if needle[i] == needle[length]:
            length += 1
            lps[i] = length
            i += 1
        else:
            if length != 0:
                length = lps[length - 1]
            else:
                lps[i] = 0
                i += 1
    
    return lps

def kmp_search(haystack, needle):
    n = len(haystack)
    m = len(needle)
    
    if m == 0:
        return 0
    
    lps = compute_lps(needle)
    
    i = 0  # Index for haystack
    j = 0  # Index for needle
    
    while i < n:
        if haystack[i] == needle[j]:
            i += 1
            j += 1
            
            if j == m:
                return i - j  # Found needle at index i-j in haystack
        else:
            if j != 0:
                j = lps[j - 1]
            else:
                i += 1
    
    return -1  # Needle not found in haystack

# Test cases
haystack1 = "sadbutsad"
needle1 = "sad"
print(kmp_search(haystack1, needle1))  # Output: 0

haystack2 = "leetcode"
needle2 = "leeto"
print(kmp_search(haystack2, needle2))  # Output: -1
