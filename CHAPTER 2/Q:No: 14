import itertools

def total_value(items, values):
    """ Calculate the total value of selected items based on their indices. """
    total = 0
    for item in items:
        total += values[item]
    return total

def is_feasible(items, weights, capacity):
    """ Check if the total weight of selected items does not exceed capacity. """
    total_weight = sum(weights[item] for item in items)
    return total_weight <= capacity

def knapsack_problem(weights, values, capacity):
    n = len(weights)
    if n == 0:
        return None, 0  # No items
    
    # Generate all subsets of items
    all_subsets = itertools.chain.from_iterable(itertools.combinations(range(n), r) for r in range(1, n+1))
    
    # Initialize variables to track optimal selection and maximum value
    optimal_selection = None
    max_value = 0
    
    for subset in all_subsets:
        if is_feasible(subset, weights, capacity):
            current_value = total_value(subset, values)
            if current_value > max_value:
                max_value = current_value
                optimal_selection = list(subset)
    
    return optimal_selection, max_value

# Test Cases
if __name__ == "__main__":
    # Test Case 1
    weights1 = [2, 3, 1]
    values1 = [4, 5, 3]
    capacity1 = 4
    optimal_selection1, max_value1 = knapsack_problem(weights1, values1, capacity1)
    print("Test Case 1:")
    print(f"Optimal Selection: {optimal_selection1} (Items with indices {optimal_selection1})")
    print(f"Total Value: {max_value1}")
    print()
    
    # Test Case 2
    weights2 = [1, 2, 3, 4]
    values2 = [2, 4, 6, 3]
    capacity2 = 6
    optimal_selection2, max_value2 = knapsack_problem(weights2, values2, capacity2)
    print("Test Case 2:")
    print(f"Optimal Selection: {optimal_selection2} (Items with indices {optimal_selection2})")
    print(f"Total Value: {max_value2}")
    print()
