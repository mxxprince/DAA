import itertools
import math

def distance(city1, city2):
    """ Calculate Euclidean distance between two cities. """
    return math.sqrt((city1[0] - city2[0])**2 + (city1[1] - city2[1])**2)

def tsp(cities):
    n = len(cities)
    if n <= 1:
        return None, None  # No cities or only one city, no tour possible
    
    # Generate all permutations of cities (excluding starting city itself)
    all_permutations = itertools.permutations(cities[1:])
    
    # Initialize variables to track the shortest path and distance found
    shortest_path = None
    min_distance = float('inf')
    
    for perm in all_permutations:
        # Construct full tour including starting and ending at cities[0]
        tour = [cities[0]] + list(perm) + [cities[0]]
        
        # Calculate total distance of current tour
        total_distance = 0
        for i in range(len(tour) - 1):
            total_distance += distance(tour[i], tour[i + 1])
        
        # Check if current tour is the shortest found so far
        if total_distance < min_distance:
            min_distance = total_distance
            shortest_path = tour
    
    return min_distance, shortest_path

# Test Cases
if __name__ == "__main__":
    # Test Case 1
    cities1 = [(1, 2), (4, 5), (7, 1), (3, 6)]
    min_dist1, shortest_path1 = tsp(cities1)
    print("Test Case 1:")
    print(f"Shortest Distance: {min_dist1}")
    print(f"Shortest Path: {shortest_path1}")
    print()
    
    # Test Case 2
    cities2 = [(2, 4), (8, 1), (1, 7), (6, 3), (5, 9)]
    min_dist2, shortest_path2 = tsp(cities2)
    print("Test Case 2:")
    print(f"Shortest Distance: {min_dist2}")
    print(f"Shortest Path: {shortest_path2}")
    print()
