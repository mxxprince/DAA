def insertion_sort(arr):
    n = len(arr)
    
    for i in range(1, n):
        key = arr[i]
        j = i - 1
        
        # Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position
        while j >= 0 and arr[j] > key:
            arr[j + 1] = arr[j]
            j -= 1
        
        # Place the key at its correct position in sorted order
        arr[j + 1] = key
    
    return arr

# Test cases
test_cases = [
    [64, 25, 12, 22, 11],
    [29, 10, 14, 37, 13],
    [3, 5, 2, 1, 4],
    [1, 2, 3, 4, 5],
    [5, 4, 3, 2, 1],
    [3, 1, 4, 1, 5, 9, 2, 6, 5, 3],
    [5, 5, 5, 5, 5],
    [2, 3, 1, 3, 2, 1, 1, 3]
]

# Output the sorted arrays for each test case
for i, arr in enumerate(test_cases):
    sorted_arr = insertion_sort(arr.copy())  # Make a copy to not modify original arrays
    print(f"Test Case {i+1}: Input: {arr}, Output: {sorted_arr}")
