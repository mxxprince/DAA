def orientation(p, q, r):
    """ Return the orientation of the triplet (p, q, r).
        0 -> p, q, r are collinear
        1 -> Clockwise
        2 -> Counterclockwise
    """
    val = (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1])
    if val == 0:
        return 0
    elif val > 0:
        return 1
    else:
        return 2

def on_segment(p, q, r):
    """ Check if point q lies on segment pr. """
    if min(p[0], r[0]) <= q[0] <= max(p[0], r[0]) and min(p[1], r[1]) <= q[1] <= max(p[1], r[1]):
        return True
    return False

def convex_hull_brute_force(points):
    n = len(points)
    if n < 3:
        return None
    
    hull = []
    
    # Find all possible pairs
    for i in range(n):
        for j in range(i + 1, n):
            # Assume (i, j) is a potential edge of the convex hull
            # Check if all other points are on the same side
            is_valid_edge = True
            for k in range(n):
                if k != i and k != j:
                    o = orientation(points[i], points[j], points[k])
                    if o == 0 and not on_segment(points[i], points[k], points[j]):
                        is_valid_edge = False
                        break
                    elif o != 0:
                        # Points i, j, k are not collinear
                        is_valid_edge = False
                        break
            
            if is_valid_edge:
                hull.append(points[i])
                hull.append(points[j])
    
    # Remove duplicates from hull
    hull = list(set(hull))
    hull.sort(key=lambda x: (x[0], x[1]))  # Sort hull points lexicographically
    return hull

# Example usage:
points = [(1, 1), (4, 6), (8, 1), (0, 0), (3, 3)]
convex_hull = convex_hull_brute_force(points)
print("Convex Hull points:", convex_hull)
