import itertools

def total_cost(assignment, cost_matrix):
    """ Calculate the total cost of the assignment using the cost_matrix. """
    total = 0
    for worker, task in enumerate(assignment):
        total += cost_matrix[worker][task]
    return total

def assignment_problem(cost_matrix):
    n = len(cost_matrix)
    if n == 0:
        return None, float('inf')  # No cost matrix provided
    
    # Generate all permutations of worker indices
    all_permutations = itertools.permutations(range(n))
    
    # Initialize variables to track the optimal assignment and minimum cost
    optimal_assignment = None
    min_cost = float('inf')
    
    for perm in all_permutations:
        current_cost = total_cost(perm, cost_matrix)
        if current_cost < min_cost:
            min_cost = current_cost
            optimal_assignment = [(f"worker {i+1}", f"task {perm[i]+1}") for i in range(n)]
    
    return optimal_assignment, min_cost

# Test Cases
if __name__ == "__main__":
    # Test Case 1
    cost_matrix1 = [
        [3, 10, 7],
        [8, 5, 12],
        [4, 6, 9]
    ]
    optimal_assignment1, min_cost1 = assignment_problem(cost_matrix1)
    print("Test Case 1:")
    print(f"Optimal Assignment: {optimal_assignment1}")
    print(f"Total Cost: {min_cost1}")
    print()
    
    # Test Case 2
    cost_matrix2 = [
        [15, 9, 4],
        [8, 7, 18],
        [6, 12, 11]
    ]
    optimal_assignment2, min_cost2 = assignment_problem(cost_matrix2)
    print("Test Case 2:")
    print(f"Optimal Assignment: {optimal_assignment2}")
    print(f"Total Cost: {min_cost2}")
    print()
