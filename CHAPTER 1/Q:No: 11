def findPaths(m, n, N, i, j):
    MOD = 10**9 + 7
    
    # Initialize a 3D array for dynamic programming
    dp = [[[0] * (N + 1) for _ in range(n)] for _ in range(m)]
    
    # Directions for moving up, down, left, and right
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    # Base case: 1 way to be at (i, j) with 0 steps remaining
    dp[i][j][0] = 1
    
    # Iterate through each step
    result = 0
    for steps in range(1, N + 1):
        temp = [[[0] * (N + 1) for _ in range(n)] for _ in range(m)]
        for x in range(m):
            for y in range(n):
                if dp[x][y][steps - 1] > 0:
                    for dx, dy in directions:
                        nx, ny = x + dx, y + dy
                        if 0 <= nx < m and 0 <= ny < n:
                            temp[nx][ny][steps] = (temp[nx][ny][steps] + dp[x][y][steps - 1]) % MOD
                        else:
                            result = (result + dp[x][y][steps - 1]) % MOD
        dp = temp
    
    return result

# Test Cases
print(findPaths(2, 2, 2, 0, 0))  # Expected Output: 6
print(findPaths(1, 3, 3, 0, 1))  # Expected Output: 12
